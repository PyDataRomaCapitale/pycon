name: Anonymize production databases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

jobs:
  build-transformer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        transformer: [
          'date-transformer',
          'email-transformer',
          'fixedtext-transformer'
        ]
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Store built artifact
        uses: actions/cache@v3
        with:
          path: replibyte/transformers/${{ matrix.transformer }}/
          key: transformer-${{ matrix.transformer }}
      - name: Build ${{ matrix.transformer }}
        working-directory: replibyte/transformers/${{ matrix.transformer }}
        run: |
          rustup target add wasm32-wasi
          cargo build --release --target wasm32-wasi

  anonymize-db:
    runs-on: ubuntu-latest
    needs: [build-transformer]
    strategy:
      matrix:
        service:
          - db: users
            service: users
          - db: association
            service: association
          - db: productionbackend
            service: pycon
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-central-1
      - name: Open tunnel to DB
        run: |
          docker run \
            --rm \
            -d \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e PORT_7777_LICENSE \
            -p 7777:7777 \
            port7777/7777:1 \
            --region=eu-central-1 \
            --database=pythonit-production \
            --ttl=1 \
            --verbose
        env:
          PORT_7777_LICENSE: ${{ secrets.PORT_7777_LICENSE }}
      - name: Fetch DB credentials
        id: db-credentials
        run: |
          OUTPUT=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID)
          PASSWORD=$(echo $OUTPUT | jq -r '.SecretString | fromjson | .password')
          USERNAME=$(echo $OUTPUT | jq -r '.SecretString | fromjson | .username')
          echo "::add-mask::$PASSWORD"
          echo "::add-mask::$USERNAME"
          echo "::set-output name=password::$PASSWORD"
          echo "::set-output name=username::$USERNAME"
        env:
          SECRET_ID: ${{ secrets.RDS_CREDENTIALS_SECRET_ID }}

      # Restore transformers
      - name: Restore email transformer
        uses: actions/cache@v3
        with:
          path: replibyte/transformers/email-transformer/
          key: transformer-email-transformer
      - name: Restore date transformer
        uses: actions/cache@v3
        with:
          path: replibyte/transformers/date-transformer/
          key: transformer-date-transformer
      - name: Restore fixedtext transformer
        uses: actions/cache@v3
        with:
          path: replibyte/transformers/fixedtext-transformer/
          key: transformer-fixedtext-transformer
      # End Restore transformers

      - name: Wait for tunnel
        run: while ! pg_isready -h 127.0.0.1 -p 7777; do sleep 1; done;
      - name: Anonymize ${{ matrix.service }} Database
        run: |
          docker run \
            --rm \
            --name replibyte \
            --network host \
            -e ENCRYPTION_KEY \
            -e BUCKET_NAME \
            -e DATABASE_URL \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -v "$(pwd)/replibyte/${{ matrix.service }}-config.yaml:/config.yaml:ro" \
            -v "$(pwd)/replibyte/transformers/:/transformers:ro" \
            ghcr.io/qovery/replibyte \
            --config config.yaml dump create --name ${{ matrix.service }}-latest
        env:
          DATABASE_URL: postgres://${{ steps.db-credentials.outputs.username }}:${{ steps.db-credentials.outputs.password }}@127.0.0.1:7777/${{ matrix.db }}
          BUCKET_NAME: ${{ secrets.REPLIBYTE_BUCKET_NAME }}
          ENCRYPTION_KEY: ${{ secrets.REPLIBYTE_ENCRYPTION_KEY }}
